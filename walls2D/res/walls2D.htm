<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<title>Walls2D</title>
<script type="text/vbscript" language="VBScript">
Function SVGControlVersion()
	on error resume next
	Set svgCtl =CreateObject("Adobe.SVGCtl")
	SVGControlVersion=svgCtl.getSVGViewerVersion()
end Function
</SCRIPT>
<SCRIPT type="text/javascript" language="JavaScript">
//global variables
var svgDoc;
var svgRoot;
var offsetX;
var offsetY;
var offsetX0;
var offsetY0;
var bPanning;
var pixSize;
var svgAspect,svgWidth,svgHeight;
var scale=1;

function saveView(bZoom)
{
	var trans=svgRoot.getCurrentTranslate();
	if(bZoom) setPixSize(0);
	offsetX=trans.getX(); offsetY=trans.getY();
	if(scale==1 && offsetX==0 && offsetY==0) {
		offsetX0=offsetY0=0;
		bPanning=0;
		//disable home and pan --
		external.zzoooo(0);
		return;
	}
	if(!bZoom) {
		//enable home and pan if not already panning --
		if(!bPanning) {
			external.zzoooo(3);
			bPanning=1;
		}
		return;
	}
	//enable home and disable panning --
	external.zzoooo(1);
	bPanning=0;
	offsetX0=offsetX; offsetY0=offsetY;
}

function setPixSize(evt)
{
	width=window.document.body.clientWidth;
	height=window.document.body.clientHeight;
	scale=svgRoot.getCurrentScale();
	if(svgAspect>width/height) {
	  pixSize=(svgHeight/height)/scale;
	}
	else {
	  pixSize=(svgWidth/width)/scale;
	}
}

function w2dInit() {
    //alert('Init called!');
	svgDoc=document.svgMap.getSVGDocument();
	if(!svgDoc) {
		//alert('No svgDoc!');
		return 0;
	}
	svgRoot=svgDoc.getDocumentElement();
	if(!svgRoot) {
		//alert('No svgRoot!');
		return 0;
	}
	var viewbox=new String(svgRoot.getAttribute('viewBox'));
	var viewboxes=viewbox.split(' ');
	svgWidth=viewboxes[2];
	svgHeight=viewboxes[3];
	svgAspect=svgWidth/svgHeight;
	setPixSize(0);
	offsetX=0;
	offsetY=0;
	offsetX0=0;
	offsetY0=0;
	bPanning=0;
	var t=svgDoc.getElementById('w2d_Ref');
	if(t) {
		t=t.getFirstChild();
	  while(t) {
			if(t.getFirstChild()) {
			  while(t.getFirstChild()) t=t.getFirstChild();
				break;
			}
			t=t.nextSibling();
		}
	}
	if(t && t.data) {
	  external.ttiitt(t.data);
		svgRoot.addEventListener('SVGResize',setPixSize,false);
		svgRoot.addEventListener('SVGScroll',function(evt){saveView(0);},false);
		svgRoot.addEventListener('SVGZoom',function(evt){saveView(1);},false);
		svgRoot.addEventListener('mousemove',onChgCoords,false);
		svgRoot.setAttribute("preserveAspectRatio","xMinYMin slice");
	}
	return 1;
}

function onChgCoords(evt)
{
	x=evt.getClientX()-offsetX;
	y=evt.getClientY()-offsetY;
	external.ccoooo(pixSize*x,pixSize*y);
}

function w2dShow(id,checkVal) {
	if(checkVal>-2) {
		var t=document.svgMap.getSVGDocument();
		if(!t) return 0;
		t=t.getElementById(id);
		if(!t) return 0;
		if(checkVal==-1) {
			t=t.getStyle().getPropertyValue('display');
			return (t=='none')?1:2;
		}
		t.setAttribute('style',checkVal?'display:inline':'display:none');
		return 1;
	}
	if(checkVal==-3) {
		if(offsetX==offsetX0 && offsetY==offsetY0) return 0;
		svgRoot.currentTranslate.x=offsetX0;
		svgRoot.currentTranslate.y=offsetY0;
		bPanning=0;
		offsetX=offsetX0;
		offsetY=offsetY0;
		return 1;
	}
	if(checkVal==-4) {
		svgRoot.currentTranslate.x=svgRoot.currentTranslate.y=0;
		svgRoot.currentScale=1;
		offsetX0=0; offsetY0=0;
		bPanning=0;
		return 1;
	}
	version=SVGControlVersion();
	if(version && version.substring(0,7)=='Adobe; ' && version.substring(7,8)>='3') {
		return w2dInit();
	}
	return 0;
}
</script>
</head>
<body scroll="no" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<embed name="svgMap" width="100%%" height="100%%" src="%s" type="image/svg+xml"/>
</body>
</html>
