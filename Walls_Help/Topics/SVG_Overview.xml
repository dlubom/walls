<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="David" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Roundtripping Overview</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">SVG Roundtripping Overview</text></para>
    </header>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">SVG roundtripping is the back and forth exchange of SVG-formatted data between two processing programs, the goal being to produce a more complete SVG document. In the version of it described here, an illustration program contributes data based largely on field book sketches, while Walls contributes data based on field book numbers. The result of this roundabout sharing of data, at least in principle, is a complete cave map that&apos;s always up to date.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">The Walls implementation borrows ideas from both an </text><link displaytype="text" defaultstyle="true" type="topiclink" href="walls_article" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">article</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> of mine and a paper presented at Siggraph &apos;92 by Thaddeus Beier, </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">Feature Based Image Metamorphosis.</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> In Beier&apos;s paper, a technique is presented for computing transformations between raster images in an animation. The method deviates from traditional mesh warping in that it uses a small, optimally chosen &quot;skeleton&quot; of superimposed line segments instead of a mesh. While the math is similar in some respects, we will be morphing vector art in SVGs as opposed to raster images. Also, survey lines -- or rather their plan projections -- will serve as the skeleton.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"></para>
    <para style="text-align:center; tabstops:24px left ;"><image src="WARPMASK.bmp" scale="100.00%" style="font-family:Arial; font-size:9pt; color:#000000;"></image></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">The above split image, a Walls2D screen capture, shows the result of changing the azimuth and length of one shot in a surveyed loop, recompiling the project, and creating an updated SVG (right frame) based on an original drawing, or </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Source_SVG" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">source SVG</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> (left frame). Coordinates will often change this much, but a</text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">&#32;</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">local reshaping this extreme will only arise when a blunder is being corrected. Note that lengthening the vector stretched the left passage&apos;s walls and floor details longitudinally while leaving its width almost unchanged. That&apos;s due to the warping algorithm Walls uses, one which tends to preserve a feature&apos;s </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">absolute</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> perpendicular distance to a vector and its </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">proportional</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> distance along the vector&apos;s length. The outline of the right passage was affected very little by the correction, even though its location changed significantly. This is characteristic of a morphing technique that&apos;s feature-based rather than mesh-based.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">This example also shows the effect of placing objects in special layers so that only their locations will change, not necessarily their shapes and orientations. The clay symbols, for example, became less dense but remained horizontal due to their layer placement. Also, </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">grouped</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> sets of features in this layer, including the cross section group and the ceiling height symbols, were treated as single objects and not distorted or broken apart. Finally, the example illustrates a type of feature that&apos;s not always handled particularly well. The line segments indicating the position of the cross section were properly translated as a group, but they also should have been rotated slightly. Since there is currently no provision for this type of adjustment, a one-time manual repair is needed, as will sometimes be the case near a survey blunder. For another example with more explanation see </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Adjustment_Brushed_Strokes" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">Adjustment of Brushed Strokes</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">The adjustment of artwork stored as SVG is a complex operation, but the details are handled automatically if the document follows some layering conventions. (See </text><link displaytype="text" defaultstyle="true" type="topiclink" href="SVG_Layers" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">SVG Layer Definitions</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">.) Features in </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">sym </text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">layers, like symbols, text, and cross sections, will track the survey, but they will be translated and scaled, not reshaped, and will maintain their page-relative orientation. Features in </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">shp</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> layers, on the other hand, can also be of the non-reshapable kind, but their </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">north-relative</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> orientation is maintained. Furthermore, path-like features in shape layers can be morphed (warped in a smooth or continuous fashion) to fit the updated positions of nearby survey vectors. In a passage wall outline, for example, the final position of each path control point depends </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">individually</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> on a weighted average of the shifts in the N closest survey vectors. (Certain weighting parameters, like N and drop-off of a vector&apos;s influence with distance can be specified in an </text><link displaytype="text" defaultstyle="true" type="topiclink" href="SVG_Advanced_Settings" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">Advanced Settings</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> dialog.) A feature adjustment, therefore, requires a method for finding the 1st, 2nd, ..., and Nth vector closest to each symbol and path control point. &#160;A map with thousands of survey vectors might have control points numbering in the hundreds of thousands, so the method obviously involves a lot of computation. The &quot;nearest-vector&quot; algorithm in Walls is efficient, however, requiring more work than a least-squares adjustment but still taking only seconds to execute on a modern desktop or notebook computer.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para styleclass="Normal"><text styleclass="Subheader" translate="true">How It Works in Practice</text></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">It&apos;s easy to get the process started. After setting up a map view in Walls, as you would when preparing to print, you instead </text><link displaytype="text" defaultstyle="true" type="topiclink" href="SVG_Export_Dialog" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">export an SVG file</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">. The result is similar to a </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Exporting_Maps" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">metafile export</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> except that survey vectors have identifying tags (XML id&apos;s) that the illustration program leaves intact during import-export operations. (It has to if it qualifies as an SVG editor.) Also, the map is usually georeferenced so that UTM coordinates are displayed in </text><link displaytype="text" defaultstyle="true" type="topiclink" href="SVG_Viewer" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">Walls2D</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">, an integrated SVG viewer.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">In the initial data export from Walls, some specially-named, empty graphics layers are created in addition to the usual survey lines and symbols. The file is then opened in Adobe Illustrator (or theoretically another drawing program), where the user places artwork inside those layers. Such artwork might include cave walls, floor and ceiling details, scale, north arrow, and annotation -- all in whichever style the user prefers. Subsequently, whenever this decorated map is ready for use by Walls, either for updating or for generating new map views, it&apos;s saved as a </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Source_SVG" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">source SVG</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left,504px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">At appropriate times thereafter, a different kind of SVG export can be invoked from Walls: one that creates a new SVG file while merging artwork from one or two existing source SVGs. The merged artwork is also transformed to fit survey lines that may have changed in a least-squares adjustment. The new SVG, possibly with extended survey lines, can in turn serve as a source SVG for either Illustrator or Walls. It&apos;s like Illustrator&apos;s version quality-wise, except that it now accurately reflects the current state of the survey. If the cave was extended with new surveys, the exported file can be brought into Illustrator and the process repeated. An important characteristic of SVG roundtripping is that image quality doesn&apos;t degrade as it often does when a raster image undergoes successive conversions -- the repeated replacement of a source file with an output file of an earlier process.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">Whether or not it&apos;s meant &#160;to be used as a source for new exports, an SVG cave map (last written by either Walls or Illustrator) can be viewed and printed from within Walls, distributed with Walls2D as a standalone interactive map, or posted on the Internet as part of a Web application. It can even be revised with a text editor (certain styles changed, elements added or removed, etc.) since SVG is standard XML text.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para styleclass="Normal"><anchor id="SVG_Limits" style="font-family:Arial; font-size:7pt; font-weight:bold; color:#0000a0;"></anchor><text styleclass="Subheader" translate="true">Current Limitations</text></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">Profile views currently can&apos;t be exported as SVG, a restriction that will soon be removed. One reason it exists now is that additional coding is required to insure that specific profile orientations are maintained in merge operations. Also, this capability will benefit from the implementation of vertical clipping planes, another planned feature. Without the latter, too many irrelevant vectors would likely project onto the plane of the profile, thereby complicating a feature adjustment.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">For a similar reason, plan views of caves with a lot of vertical complexity will be more difficult to deal with than plan views of a largely horizontal cave. For example, a lower level survey shouldn&apos;t influence the artwork associated with surveys located far above it. In practice we can ignore this issue for many caves. The inclusion of unrealistically weighted vectors will often have no noticeable effect on the adjustment of artwork; however, when the relative positions of upper and lower survey lines change significantly, some unwanted distortion can occur near crossover points. In that case it should be relatively easy for the Illustrator user to touch up those areas, thereby creating a new SVG source file that likely won&apos;t require the same repairs again. Another option, of course, is to work with different levels of the cave separately and combine them later when necessary. Finally, you may have vector lines (e.g., surface surveys) you want to include on the map but whose influence on surrounding map features you want to remove completely. You can do this by flagging a vector&apos;s representation while in Illustrator or by editing the SVG text. (For details, see the w2d Vectors layer description under </text><link displaytype="text" defaultstyle="true" type="topiclink" href="SVG_Layers" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">SVG Layer Definitions</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">.)</text></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">A longer-term goal is to support SVG roundtripping with drawing programs other than Adobe Illustrator. Perhaps because the format is necessarily complex, no other popular program seems to support it quite well enough for our purposes. That means it should at least be able to roundtrip its own SVG files and preserve the XML id&apos;s that label vectors. (Tee </text><link displaytype="text" defaultstyle="true" type="topiclink" href="SVG_Other_Programs" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">Using Other Drawing Programs</link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">.) The good news is that interest in SVG seems to be increasing steadily, especially in the open source community and among GIS users and developers.</text></para>
  </body>
</topic>
