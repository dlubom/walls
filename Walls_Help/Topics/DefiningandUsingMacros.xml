<?xml version="1.0" encoding="UTF-8"?>
<topic template="Default" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title translate="true">Defining and Using Macros</title>
  <body>
    <header>
      <para styleclass="Heading1"><text styleclass="Heading1" translate="true">Defining and Using Macros</text></para>
    </header>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">To control how raw survey data is interpreted during compilation, you normally assign values to named parameters on </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Units_Directive" styleclass="Normal" translate="true">#Units directive</link><text styleclass="Normal" translate="true"> lines. For example,</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">#units &#160;IncV=-0.15</text><text styleclass="Normal" translate="true"> &#160;... etc.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">will cause a correction of -0.15 degrees to be applied to inclination measurements. Such parameter settings will apply to all compass-and-tape data lines that follow in the file until the next such directive overrides them. #Units directives not only can appear multiple times in a data file, but their allowed parameters can also be set in the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Compile_Options_Page" styleclass="Normal" translate="true">Compile Options</link><text styleclass="Normal" translate="true"> property fields of project tree branches. In the latter case, they set the defaults for possibly many data files (leaves) in the tree.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A problem with this approach is that some kinds of parameters, especially those intended for particular instruments or surveys, might need to be experimented with or revised fairly often. For example, you might want to adjust a compass correction </text><text styleclass="Normal" style="font-style:italic;" translate="true">iteratively</text><text styleclass="Normal" translate="true"> (multiple recompiles) to discover the &quot;best fit&quot; correction for an instrument&apos;s data scattered throughout a larger project. Another example: The relative </text><link displaytype="text" defaultstyle="true" type="topiclink" href="variance" styleclass="Normal" translate="true">variance</link><text styleclass="Normal" translate="true"> you may want to assign to a high quality subset of data (see </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Seldom_Used" anchor="UV Parameter" styleclass="Normal" translate="true">UV parameter</link><text styleclass="Normal" translate="true">) could change as the survey grows and overall quality improves.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">To avoid having to edit many individual files, or to group the files so that #units parameters can be set as branch properties, you can instead take advantage of defined variables, or </text><text styleclass="Normal" style="font-style:italic;" translate="true">macros</text><text styleclass="Normal" translate="true">. Here is a #units directive containing two macro definitions:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">#units &#160;$sunto112_IncA=0.25 &#160;$sunto112_typeAB=&quot;N,2&quot;</text><text styleclass="Normal" translate="true"> &#160;...etc.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A macro definition resembles an ordinary parameter assignment, except that the parameter name is prefixed with a dollar sign ($) and can be a name of your own choosing. In this example you&apos;re defining two macros named </text><text styleclass="Normal" style="font-weight:bold;" translate="true">sunto112_IncA</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Normal" style="font-weight:bold;" translate="true">sunto112_typeAB</text><text styleclass="Normal" translate="true">, and are assigning them values </text><text styleclass="Normal" style="font-weight:bold;" translate="true">0.25</text><text styleclass="Normal" translate="true"> and </text><text styleclass="Normal" style="font-weight:bold;" translate="true">N,2</text><text styleclass="Normal" translate="true">. Normally, each name will be followed by an equals sign and one or more characters representing a value. (You can, however, assign an </text><text styleclass="Normal" style="font-style:italic;" translate="true">empty string </text><text styleclass="Normal" translate="true">to a macro by simply dropping the equals sign.) Unlike the pre-defined parameter names, macro names are </text><text styleclass="Normal" style="font-style:italic;" translate="true">case sensitive</text><text styleclass="Normal" translate="true"> and can be of any reasonable length.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">Important Note:</text><text styleclass="Normal" translate="true"> The text to the right of the equals sign can also be a long string, but it must be enclosed in double quotes if it has embedded spaces, commas, or equals signs (as in the second definition above). </text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">Also, it&apos;s a good idea to use quotes if the replacement string itself contains a macro </text><text style="font-family:Arial; font-size:9pt; font-style:italic; color:#000000;" translate="true">reference</text><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true"> (see below).</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Subheader" translate="true">Referencing Defined Macros</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">While it may be more convenient to </text><text styleclass="Normal" style="font-style:italic;" translate="true">define</text><text styleclass="Normal" translate="true"> macros with </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Compile_Options_Page" styleclass="Normal" translate="true">Compile Options</link><text styleclass="Normal" translate="true"> properties, the actual directives in data files are where you&apos;ll normally </text><text styleclass="Normal" style="font-style:italic;" translate="true">reference</text><text styleclass="Normal" translate="true"> the macros that have been defined at a higher level. Such a directive might look like this:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">#units IncA=$(sunto112_IncA) &#160;typeAB=$(sunto112_typeAB) </text><text styleclass="Normal" translate="true"> ...etc.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Note that when macros are being referenced, their names are delimited by &quot;$(&quot; and &quot;)&quot;. No spaces are allowed inside the parentheses. During compilation, Walls will perform macro </text><text styleclass="Normal" style="font-style:italic;" translate="true">replacement </text><text styleclass="Normal" translate="true">before the directive line is processed in the usual fashion. The above would be equivalent to</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">#units IncA=0.25 &#160;typeAB=N,2</text><text styleclass="Normal" translate="true"> ...etc.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">A macro&apos;s defined value, or replacement string, can be used to construct </text><text styleclass="Normal" style="font-style:italic;" translate="true">any portion</text><text styleclass="Normal" translate="true"> of a directive line apart from the directive&apos;s name. For example, to simplify the above case we can define a single macro to assign two different parameters:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">#units &#160;$sunto112=&quot;IncA=0.25 typeAB=N,2&quot;</text><text styleclass="Normal" translate="true"> ...etc.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">The quotes are obviously necessary in this case. In the data files we could then produce the same result as above with this line:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">#units $(sunto112)</text><text styleclass="Normal" translate="true"> &#160;...etc.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Likewise, you may want to control only a portion of a parameter setting:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">#units $suunto112_tolerance=&quot;,2&quot;</text><text styleclass="Normal" translate="true"> ...etc.</text></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">#units typeAB=N$(suunto112_tolerance)</text><text styleclass="Normal" translate="true"> ...etc.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" translate="true">Then you could restore the default FS/BS tolerance by simply redefining the macro to the empty string by dropping the equals sign:</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Normal" style="font-weight:bold;" translate="true">#units $suunto112_tolerance</text><text styleclass="Normal" translate="true"> ...etc.</text></para>
    <para styleclass="Normal"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">Macro replacement can occur in Compile Options strings and in most hash-prefixed directive lines in data files. </text><link displaytype="text" defaultstyle="true" type="topiclink" href="FIX_Directive" style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">#FIX directives </link><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">are the only exception. A macro expression, $(...), in an ordinary data line or vector definition will most likely generate an error message. Attempting to use an undefined macro will also generate an error message.</text></para>
    <para style="tabstops:24px left ;"></para>
    <para style="tabstops:24px left ;"><text style="font-family:Arial; font-size:9pt; color:#000000;" translate="true">Finally, you might ask why we require parentheses in a macro reference, $(name), but not in the definition, $name=&quot;...&quot;. &#160;The reason this is customary is that a macro reference can be embedded anywhere in a string of text and must be distinguishable from surrounding characters that are not necessarily separators. A macro definition has a different syntax so the compiler can distinguish it from a reference.</text></para>
  </body>
</topic>
