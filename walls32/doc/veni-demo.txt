
General Info for Setting Up the Demos
=====================================

For these demos, you'll be compiling the root folder of KAUAD.PRJ. In the SVG Sources branch, only KAUA_w2d_whiteontan.svg should be normally attached. Your frame dimensions for printing should be set at 10 x 7.5 inches, or whatever makes the Page Layout page look OK depending on your installed printer. (In case you demo the Page Layout page.) I also would set up some custom colors for map backgrounds (non-cave areas) when we're not data screening. The above SVG uses RGB(255,204,153). Another color good for backgrounds when the cave floor is white is RGB(192,220,192). Note that the standard color dialog has an "Add to Custom Colors" option.

Go to Options | Screen maps and set the frame width for Display maps to something large enough that the map frames fill about 2/3 of the screen (or whatever looks best). Also, enable name prefix display for both screen and printer. That way we'll see prefixes on SVGs in case we use them for dummy shots. The Walls2D screen size, which is remembered, can also be set up optimally.

Although it will be compiled each time, the Surface Surveys branch won't show on displayed and exported maps since that branch is Detached on the Segments page. This setting, like most other display related attributes, is preserved in the database (.NTA file) which is reused and updated during successive compilations.

Another setting for these demos is on the Compile Options property page of the root folder. Make sure that "Process source SVG if one is attached" is UNCHECKED to start with -- especially when the idea is we're entering and cleaning up field book data. That would just slow compilations. Also, on the Segments page, set the object colors to their defaults for data screening: bright blue-green for vectors ("Actun Kaua" bullet), black for background, medium gray for passage, and white for labels, markers, and notes.


Demo of Extreme Warp
====================

1) Maximize Walls window and compile project with ONLY "Demo of Extreme Warp" under "Demos" attached. (The single vector in this file initially has only one end attached.) You should get the normal East-up view showing the surface surveys and the entire cave. Click button "Scale & Position" on the Map page and set the scale to 1:700. The preview map should then show the extreme West end of the blue-colored North Maze loop system at the upper left of the frame. Hold down the CTRL key and left-drag so that the lowermost blue loop is horizontally centered and about a third of the way up from the bottom of the frame. A left-right, surface survey line will then be about a third of the way from the top. Click the "Save" button so this view can later be recalled. Then, if you wish, quickly explore the cave on the Preview map, explaining how the colors reflect the geometry -- use the System and Traverse buttons at the bottom of the Map page's control panel to highlight the different loop systems -- more about this can wait for the data screening demo.

2) Next, to show the area of interest in detail, let's generate an SVG view of that specific section. But first, for reasons to be explained below, go to the Segments page, expand the segments tree to find "Demo of Extreme Warp", select that node, click "Use Own", and change the vector line color for that item alone to dark blue. A little explanation about the Segments tree and inherited settings can be given here, but there probably won't be time for that. You could also quickly pass across the Page Layout page when returning to the Map page.

3)Restore the view you just saved ("Recall" button), then open the SVG export dialog and CHECK the Grid, Vectors, Walls, and Detail boxes. UNCHECK the Legend box, and put GRAYED CHECKS in the remaining layer boxes. Make sure the "Adjustable Output" is UNCHECKED to produce a more efficient SVG, but one that's NOT compatible with Illustrator for roundtripping. Leave "Run Walls2D" CHECKED. Most important, click on the "Advanced settings.." button and verify that "Use styles and colors in merged file" is CHECKED. This insures that we don't have to worry about current color and style settings -- except for new vectors not already represented in the source SVG. The latter will take on the colors currently set in Walls. Our bogus vector is not in the SVG, so we changed its color to blue so it will be more easily visible on the source SVG's light tan background.

At this point (when in the SVG dialog) we might explain briefly what Scalable Vector Graphics (SVG) is and how Walls uses it. What we're getting ready to do next is generate a compact SVG file for viewing and/or printing in Walls2D, a separate program module that Walls automatically invokes. The file will not be used for any other purpose. In fact, you'll normally leave the default output file name (KAUA_w2d.svgz) unchanged so that the file is rewritten each time you generate an SVG view, which will be often. Although fast enough, the process is complicated beneath the surface. Basically, when you click OK, you initiate a combined SVG import/export operation. This involves 1) reading an existing SVG file attached to the project tree, a "source SVG" containing artwork added to it outside of Walls, and 2) combining its contents with new survey data while writing a new SVG. Artwork is adjusted to fit the surveys as required, but no quality is lost. In our case the external program is Adobe Illustrator. (Version 10 is required.) Actually, another program, Xara X, was used extensively for this project, but eventually the artwork had to be routed back through AI. (More info on SVG is at the bottom of this file.)

4) Click OK to generate the SVG and launch Walls2D. Turn on Vectors and zoom in to see the stray vector near the center. Turn on Labels. Explain that without adjusting this vector at all (it's been given zero variance to constrain it), we're going to make station x:D128 coincide with station D128 more than 15 meters to the East of it. It's as if someone just surveyed this "connection", D174 to D128, and required us to accept it. This will obviously require a drastic reshaping of the existing map. Inspect the image briefly (demo the controls and point out the UTM coordinate display) and then minimize this Walls2D window. Also, close the Walls Review dialog (although it's not really required).

5) On the project window doubleclick the file icon for "Demo of Extreme Warp", opening the file in the Walls editor. Read the comment and change station "x:D128" to "D128". Point out that immediately when you type a change, the blue root folder icon on the project tree turns yellow, meaning that a Compile rather than just a Review will be necessary. After making the change, click the Compile button. (Don't forget to highlight the root first.)

6) Go to the Map page if you're not taken their automatically (a toolbar option toggle). Ignore the statistics on the Geometry page -- that's another demo. (They are confusing anyway since we've unrealistically assigned 0 variance, or 100% confidence, to a bogus vector. We're not even questioning it. This plays havoc with the statistics of nearby vectors.) Click the Recall button, then generate another SVG without changing any option. (You can change the output file name, but its not necesary if you keep the first instance of Walls2D open.

6) With two instances of Walls2D running, minimize Walls and any other desktop applications. Restore both Walls2D instances. Next, right-click on the Windows task bar and select Tile Windows Vertically. In each Walls2D screen, right click in the area of interest and choose Zoom In on the pop-up menu. Do this only once on each screen. Finally, press ALT and left-drag the images so that they can be easily compared. Note the differences. There is one area of particular interest near the top. Two rooms are so close to each other that a shifted vector in one has influenced the morphing of features in the other. Only in extreme cases (bad blunders repaired, for example) will you see undesirable, or unrealistic effects of the morphing algorithm. In such cases, manual touch-ups in Illustrator might be necessary.

The algorithm Walls uses is described in the help file and has some adjustable parameters you can play with on the Advanced SVG Export Settings dialog. The default settings have worked quite well with this particular project. Basically, the method tends to preserve a feature's proportional distance along a survey vector while preserving its perpendicular distance. Morphable graphics objects such as wall outlines consist of sequences of control points defining polylines and Bezier curves. Each control point's final position is separately computed from a weighted average of the influences of nearby survey vectors. The closest vectors will of course have the greatest influence.


More General Info on Walls SVG Support
======================================
So far, AI is the only mainstream drawing program that can both read and write SVG without significant loss. (This will change as the popularity of SVG increases, as appears to be inevitable.) In particular, both the graphics and the special tags (XML IDs) that Walls uses to associate graphics objects with survey vectors must be preserved across program interchanges. It seems that the current version of CorelDraw 11 fails to do this, but at least the company is actively developing and promoting their SVG technology. (The Freehand developers at Macromedia, are evidently dragging their feet because their bosses see SVG as a Flash competitor.) The XML-based SVG is an open, well-documented, W3C recommended standard for 2D graphics. Many GIS professionals, in particular, seem to be excited about it. To judge from developer mailing list postings, a lot of SVG software is now under development.

Anyway, when Walls generates a new SVG file based on an existing source SVG (a process we call a merged export), it combines vector data from the current survey database with the internally-tagged artwork in the source SVG, transforming the latter as necessary to fit new or corrected surveys. The user then has two basic output options: an SVG file best used for viewing or printing (no special tags or metadata), or a file that can in turn be used as a new source SVG for either Walls or Illustrator. The latter type is produced with the "Adjustable Output" option. Both types of files compatible with Walls2D and Adobe's free browser plug-in, ASV 3.0. (Walls2D uses this plug-in for graphics rendering.) Unfortunately, due to a glitch in Illustrator that prevents it from properly handling SVGs with data clipped to the frame, the non-adjustable SVGs are not quite compatible with Illustrator. (The images appear upside down -- but you can fix this by manually editing the SVG file as text. If the extension is .svgz, the file is gzip-compressed and must be expanded before being edited directly from within Walls. This is easy enough to do by simply exporting it again while specifying an .svg extension for the output file. ASV can also do this.)

For an SVG source to have the required vector data and ID tags, it must have originated from Walls in a raw, or non-merged, SVG export. (Adjustable option turned on.) From the user's standpoint, this initial step is similar to exporting a Windows metafile. You pick the particular map view, scale, colors, etc., along with which objects (besides vectors) to include. You then export the map instead of just displaying or printing it. You will use the SVG export dialog but simply not choose any of the Merged Layers options. In constructing the new SVG, Walls produces a particular layer structure that's documented in the help file. The Illustrator user then adds various kinds of artwork to those layers, some initially empty and some entirely optional. Text and symbols will be scaled and translated during subsequent merged exports from Walls. Path objects such as wall outlines will also be morphed. The back-and-forth interchange of SVG data can continue indefinitely, with virtually no loss of graphics quality in the process. Until now, metafiles have been the best way to get survey data out of Walls and into drawing programs -- a one-way process. With SVG, true roundtripping of high-quality vector graphics between applications has finally become practical.
================



