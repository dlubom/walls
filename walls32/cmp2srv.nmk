# Makefile for MSC++ DOS C or C++ Application with Library
#
# Invoke NMAKE indirectly by running MAKE.BAT or MAKEDB.BAT.
# This eliminates predefined macros and creates a .LOG file.
#
# MAKE <makefile base name> [options] [targets..]
#
# Option "/A" does a complete rebuild. Target "clean" erases
# all generated files. Target "bsc" builds $(AP_NAM).bsc when
# a precompiled header is used.
#
# To use a precompiled header, define PCH_H below as the name
# of a local header file containing just the leading set of
# #include statements in AP_SRC. In AP_SRC the set should be
# replaced with a single statement that includes this header.
#=============================================================
#Macros specific to application --

AP_NAM   = cmp2srv        #Application and makefile base file name
AP_DIR   = c:\bin         #Optional destination to copy EXE
AP_SRC   = $(AP_NAM).c

MODEL   = M

AP_MOD  = $(AP_NAM).obj
AP_OPTS = /A$(MODEL)
AP_HDRS = \vc\trx\trx_str.h

PCH_H   =  #Local header to be precompiled (optional)

#Library to be generated --
!ifdef DB
LB_NAM  =
!else
LB_NAM  =
!endif
LB_OPTS = /NT_TRX_TEXT /AM
LB_DIR  = \vc\trx                  #Normally, the environmental LIB
LB_ADD  =                          #Additional LIBS or OBJS to merge

#Extra module necessary for linkage --
EX_MOD  =
EX_SRC  =
EX_CSEG = _TEXT
EX_OPTS = /A$(MODEL)
EX_HDRS = \vc\trx\trx_str.h

# The following modules will use the inference rule for C modules
# and will have their code segment renamed --

LB_MODC =
LB_MODA =

#==============================================================
MAP    = NUL            #Use /M, /M:FULL, NUL, or blank for segs

LIBS   = $(LB_NAM) trx_str$(MODEL) $(MODEL)libce

#Macros specific to compiler and application type --
LB     = lib
AS     = tasm
ASOPT  = /mx
LK     = link
LKOPT  = /nod /on:n
CL     = cl
CLOPT  = /D_DOS /W3 /Zp /c

#Debug related option revisions --
!ifdef DB
LKOPT  = $(LKOPT) /CO
CLOPT  = $(CLOPT) /Od /G2 /Zi /f
ASOPT  = $(ASOPT) /zi
!else
#For a BC++ compatible OBJ, do NOT enable function level linkage (Gy) --
CLOPT  = $(CLOPT) /f- /Ocegilnot /Ob1 /OV4 /G3 /Gs /Gf
!endif

!if "$(PCH_H)"!=""
!ifdef DB
PCH    = d$(AP_NAM)
LKOPT  = $(LKOPT) $(PCH).obj
!else
PCH    = p$(AP_NAM)
!endif
!endif

!if "$(LB_MODC)"!=""
LB_OPTC= +$(LB_MODC)
LB_OBJC= $(LB_MODC: +=.obj ).obj
!endif

!if "$(LB_MODA)"!=""
LB_OPTA= +$(LB_MODA)
LB_OBJA= $(LB_MODA: +=.obj ).obj
!endif

#Inference rules --
.SUFFIXES : #Clear predefined suffixes (not necessary if /R used)
.SUFFIXES : .c .a .cpp
.cpp.obj:
        $(CL) $(CLOPT) /A$(MODEL) $<
.a.obj  :
        $(AS) $(ASOPT) $<
.c.obj  :
        $(CL) $(CLOPT) $(LB_OPTS) $<
#========================================================
all: $(AP_NAM).exe

$(AP_NAM).exe : $(AP_MOD) $(EX_MOD)
        $(LK) $(LKOPT) $(AP_MOD) $(EX_MOD),$(AP_NAM),$(MAP),$(LIBS);
!ifndef DB
!if "$(AP_DIR)"!=""
        copy $(AP_NAM).exe $(AP_DIR)
!endif
!endif

!if "$(LB_NAM)"!=""
$(LB_DIR)\$(LB_NAM).lib: $(LB_OBJC) $(LB_OBJA) $(AP_NAM).nmk
        - del $@
        $(LB) @<<
$@
Y
$(LB_OPTC) $(LB_OPTA) $(LB_ADD);
<<
!endif

clean:
        -erase *.pch
        -erase *.exe
        -erase *.obj
        -erase *.map
#=======================================================
# Compilation rules for AP_MOD --

!ifndef PCH
$(AP_MOD) : $(PCH_H) $(AP_HDRS)
        $(CL) $(CLOPT) $(AP_OPTS) $(AP_SRC)
!else
$(AP_MOD) : $(PCH).pch $(PCH_H) $(AP_HDRS)
        $(CL) $(CLOPT) $(AP_OPTS) /Yu$(PCH_H) /Fp$(PCH).pch $(AP_SRC)

$(PCH).pch: $(PCH_H)
        $(CL) $(CLOPT) $(AP_OPTS) /Fp$(PCH).pch /Fo$(PCH) /Yc <<$*.c
#include "$(PCH_H)"
<<
        @echo "Precompiled header generated."

bsc:
        cl /A$(MODEL) /Zs /W0 /Fr *.c
        bscmake /n /v /S$(PCH_H) /o$(AP_NAM).bsc *.sbr
!endif

#Compilation rule for EX_MOD --

!if "$(EX_MOD)"!=""
$(EX_MOD) :  $(EX_SRC) $(EX_HDRS)
        $(CL) $(CLOPT) $(EX_OPTS) /Fo$(EX_MOD) $(EX_SRC)
!endif
#<end>
